= Milestone 3 - Interconexión de wallets
:author: Ezequiel Postan (ezequiel.postan@gmail.com)

En este milestone comenzaremos a trabajar sobre cómo los usuarios usarán el sistema. +
En el milestone 1 construímos una wallet que permite que un usuario reciba dinero (bitcoins) de una
persona que utiliza una billetera externa (como coinbase, blockchain.info, etc) y pueda reconocer de
quién provino el dinero. +
También permitimos poder enviar bitcoins a este tipo de wallet desde nuestra billetera. En ambos casos
registramos a esta persona que usa billeteras externas a la plataforma con una identidad que llamamos
extra user. +

Una identidad es simplemente una forma de identificar a una persona, en ocasiones tenemos categorías
para clasificar cierto tipo de identidades. En el caso que mencionamos arriba, la identidad extra user
se la asigna a personas que envían/reciben dinero usando billeteras externas a las que están en nuestra
plataforma. +
En el milestone 2 observamos que creamos también identidades como developer, designer y translator
entre otras. Allí vimos que una misma persona puede tener varias identidades según el contexto o forma
en que usa las subaplicaciones del sistema. +

También recordemos que remarcamos en el milestone 2 el concepto de device user. Esta identidad es quizás
la más importante dentro de un dispositivo, no sólo identifica a un usuario dentro del hardware que corre
la plataforma sino que también permite relacionar las distintas identidades de ese usuario. +
En más detalle, cuando uno abre la aplicación se loguea como device user y las identidades que uno crea
al usar la aplicación (como por ejemplo crear una identidad de developer) se asocian al Device User
actualmente logueado. +
Si se hace un logout y se ingresa en el mismo dispositivo con otro device user entonces los creados por
el device user anterior no serán mostrados y cuando el usuario se vuelva a loguear con el Device User
original volverán a poder manejarse la identidad de developer antes creada. +

En este milestone entra en juego una nueva identidad que hasta ahora hemos mantenido implícita, la de
intra user. Todos los usuarios (Device Users) tienen al menos una identidad de instra user asociada.
Esta identidad representa a los usuarios dentro de la plataforma (trascendiendo al dispositivo). +

Entre intra users se podrán enviar y recibir dinero usando las wallets del sistema, la diferencia con
las transacciones que se realizan con algún extra user es que al ser usuarios del sistema tendremos
mucha más información y recursos disponibles. Por ejemplo, podemos buscar a los usuarios dentro del
sistema sin tener que conocer ninguna dirección bitcoin; realizar pagos sin que el usuario final deba
escribir o siquiera conocer direcciones bitcoin; pedidos de pagos; notoficaciones de pagos, etc. +

Veamos con más profundidad estas nuevas funciones y las modificaciones que requeriremos realizar.

== Administración de Intra Users

Una identidad se puede crear en cualquier sub app que maneje dicha identidad. En el caso del Intra
User tendremos la sup app Intra User que permitirá crear y loguarse estas identidades. Las identidades
registradas se pueden usar en todas las wallets que tiene asociadas el Device User logueado. +
Tener varias identidades de intra user dentro de una wallet le permite a un usuario emitir pagos con
cierto anonimato ya uno puede realizar cierto tipo de pagos desde una identidad especial.

=== Agregar intra users - Intercambiar información

Supongamos que nosotros logueados con el intra user A deseamos agregar al intra user B. A través de
diversas sub apps podemos buscar nuevos intra users, en este milestone podria ser a través de un tab
de búsqueda de contactos dentro de cada wallet para agregarlo sólo a la wallet o quizás desde la misma
sub app intra user para agregarlo a todas las wallets usando el intra user que tengamos logueados en
ese momento. +
Sin pérdida de generalidad buscamos a B en el tab de búsqueda de una wallet y cuando lo encontramos
lo seleccionamos para agendarlo. El netwoek service intra user enviará una solicitud a B para que nos
acepte como contacto, hasta que B no nos acepte no podemos enviarle dinero ni recibir dinero de B. +
Cuando B nos acepta como contactos entonces A el network service de B nos comunica la aceptación para
que quede registrado. +
Para una descripción detallada ver el archivo "Agregado de Usuarios | Wallet Contacts | Actor Intra
User | Intra User Network Service". +

== Requerimientos de pago

Permitiremos que entre usuarios se pueda enviar y recibir requerimientos de pago. Un requerimiento de
pago a grandes rasgos es una solicitud que hace un usuario a otro en la que figura un monto a pagar,
un usuario al que pagar dicho monto y un mensaje descriptivo. +
Pensemos en un usuario A enviando un requerimiento de pago a B. +
En primer lugar, ambos usuarios deben haber intercambiado su información (deben ser contactos uno del
otro). +
El usuario A completa un formulario con un monto a pagar, coloca una descripción y selecciona al contacto
B (el destinatario). Al realizar el envío este se almacena en un registro y se envía a través del network
service money request a B. +
Cuando el network service de B recibe el requerimiento lo comunica a través de un evento al módulo de
requerimientos de pago de la capa Request para que vaya a buscar el requerimiento. Cuando este fue
adquirido por el módulo de la capa de request el network service conforma la recepción a su par en el
dispositio de A. +
Posteriormente B debe aceptar o rechazar el requerimiento; en ambos casos el network service de B
informa al de A la decisión. Además, en el caso de aceptar la solucitud se generará inmediatamente
la transacción que envía ese dinero. Claramente la interfaz no debe permitir que se acepte la solicitud. +


== Intra Users y vistas de una wallet

Pensemos cómo podemos organizar la información que mostramos en diferentes tabs de la wallet al
incorporar el concepto de Intra User. Para ello supongamos que tenemos dos identidades de Intra User,
A y B. +

=== Balances

Los balances de la wallet deben basarse en las transacciones de ambas identidades dado que corresponden
al mismo Device User y por ende los fondos son del mismo usuario. Podemos dar la opción al usuario de
ver también los balances en función a las identidades. +

=== Transacciones

Al igual que con los balances, las transacciones de las diferentes identidades pertenecen realmente
al mismo usuario por lo que mostraremos todas las transacciones combinadas (cosa que de hecho ya hacemos). +
Nuevamente permitiremos que el usuario haga filtros de las transacciones según su identidad. +

=== Contactos

Al agregar un contacto uno se encuentra logueado con una identidad de intra user, la cual es entregada
al otro intra user con el que se está intercambiando información de contacto. Debemos mostrarle al
usuario ver la lista de contactos que ha registrado con la identidad con la cual está logueado.

=== Requerimientos de pago

Deberá agregarse un tab para los requerimientos. Dentro de este tab querríamos poder visualizar tanto
los que emitimos nosotros como los que se nos solicitan. En cuanto a la división de esta información
según el intra user logueado dejaremos que cada wallet decida la mejor manera de mostrar estos datos
y brindaremos la interfaz más general posible. +


== Información de un Intra User

* Nombre: nombre que uno asigna para la identidad que se crea. Este será el nombre que se mostrará a
los demás usuarios de la plataforma.
* Clave pública.
* Clave privada.
* Device User asociado

== Transacciones








Plugins Involucrados
La lista de plugins que se van a implementar / modificar en este Milestone es la siguiente:

Reference Wallet / Bitcoin --> UPGRADE

Transaction / Outgoing Intra User --> NEW
Transaction / Incoming Intra User --> NEW

Crypto Router --> UPGRADE
Deberá clasificar el nuevo especialista y enviar cuatro eventos nuevos especializados para el intra
user.


Middleware / Contacts --> UPGRADE
Al wallet contacts le agregaremos un campo de estado del proceso de incorporación de un contacto el
cual podrá ser "Solicitud enviada" o "Contacto". Cuando agreguemos Extra Users se marca como "Contacto"


Request / Money Request --> NEW
histórico de request hechos y recibidos

Identity / Intra User

Network Service / Intra User --> NEW
Network Service / Money Request --> NEW
Network Service / Money --> NEW