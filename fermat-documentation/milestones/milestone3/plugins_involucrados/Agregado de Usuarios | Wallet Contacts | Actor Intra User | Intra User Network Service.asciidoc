= Agregado de contactos

El concepto de contacto depende en este momento de una wallet a la cual el contacto está asociado.
Con esto intentamos decir que uno agregará contactos desde una wallet. No es extraño pensar que un
usuario que use más de una wallet quiera tener al mismo contacto en varias de ellas. +
En un análisis más profundo, un contacto representa una relación más general entre usuarios que
identificaciones para enviar y recibir dinero. La plataforma puede brindar servicios más amplios como
podría ser un simple servicio de chat entre usuarios. +
Por ende crearemos una sub app para manejar a los intra users la cual nos permitirá buscar, agregar,
eliminar usuarios que tomaremos como contactos. El componente que administrará estos intra users será
el intra user de la capa Actor. Además, desde cada wallet podremos relacionar a estos intra users como
contactos de la wallet agregando registros al wallet contacts. +

== Actor Intra User y Middleware Contacts

En el plugin DMP Actor Intra User (Intra user de la capa actor) tendremos almacenados el public key,
nombre del intra user, fecha en que agendamos al contacto foto de perfil, un estado que indicará si
han aceptado o no nuestra solicitud de contacto ("Solicitud enviada", "Contacto").

Cuando incorporamos un usuario como contacto de una wallet tendremos dos situaciones:

Si ya hemos agregado al instra user en el módulo de Actor Intra User. +

En este caso simplemente agregamos al wallet contact la siguiente informacion:

* Contact Id: será un UUID.
* La public key del actor (tendremos que cambiar el UUID que tienen los extra users por un public key
para mantener uniformidad, los device users e intra users ya usan public keys)
* El nombre que le demos al contacto
* La public key de la wallet
* El tipo de actor (Device, extra o intra user)
* La dirección crypto que nos dan para enviar dinero debería ser almacenada aquí. En principio no
tendremos este dato hasta que el otro usuario acepte nuestra solicitud para agendarlo. Cuando el usuario
nos acepte como contacto nos enviará la dirección que se almacenará aquí a través del intra user network
service.
* Un estado que indique si el otro usuario ya nos envió una dirección para poder enviarle crypto.

Cuando tengamos la confirmación de que aceptaron nuestra solicitud (información que vendrá con la
deriección que usaremos para enviarle dinero a la otra persona) agregaremos al actor address book y
al wallet address book la dirección que le enviamos a este contacto. +

Si no tenemos agendado el intra user en el plugin DMP Actor Intra User entonces debemos primero agregar
allí el contacto y posteriormente agregar la información en el wallet contacts, actor address book y
wallet address book.

// COMENTARIO RECORDATORIO - IGNORAR - ASCIIDOC NO RENDERIZA ESTOS COMENTARIOS
//
// Contacts -> La dir que me dio para que le mande
// ActorAddBook ->  La que le di para que me mande
// Extra User -> Id y nombre

== Nerwork Service Intra User

Veamos el proceso para agregar un contacto desde la sub app Contacts (posible nombre para la Intra User). +

Supongamos que nosotros logueados con la identidad de Intra User A deseamos agregar al Intra User B.
Podemos buscar a B desde diversas sub apps, en este milestone podría ser desde un tab de una wallet
o desde la sub app de contactos. +
En ambos casos lo primero que hacemos es agendar al usuario en el plugin Actor Intra User por lo que
debemos almacenar sus datos allí y enviar la solicitud de contacto con nuestros datos. Para esta tarea
necesitamos que el Network Service Intra User nos de una lista de contactos sobra la que podramos
elegir agregar por defecto (como la típica sugerencia de ¿conoces a...?) y además formas de buscar un
contacto en particular siguiendo filtros como el nombre del usuario. +
Cuando encontramos al usuario a agendar y accionamos el inicio del proceso de agendar al usuario (lo
cual podría ser presionar un botón), agregamos un campo en el Actor Intra User con estado "Solicitud
Enviada". El network service envía un mensaje a su par en B con los datos de A solicitando aceptación,
el usuario podrá entonces aceptar o rechazar la solicitud.

* Si es rechazada el network service de B comunica la decisión a su par en A para que este envíe un
evento informativo y se elimine el registro del Actor Intra User.
* Si es aceptada el network service de B comunica la decisión a su par en A para que este marque en
estado del usuario en el Actor Intra User el valor "Contacto". +

Hasta no ser un contacto aceptado no podrán darse ciertos servicios a A que involucren a B, como enviar
mensajes y hasta no ser aceptado como contacto de alguna wallet no se podrán usar servicios aún más
específicos como enviar dinero, solicitudes de pago, etc. +
Estas restricciones deben registrarse principalmente en los network services del dispositivo de B.
Es decir, que los network services controlaran los contactos agendados antes de aceptar ciertos
mensajes de otros network services pares. +


== Network Service Crypto Addresses - Agendar contactos en wallet - Intercambio de direcciones

A la hora de agendar un contacto en una wallet tenemos otros desafíos que analizar. +
Si bien hoy tenemos una única reference wallet debemos considerar que en el futuro habrán wallets de
diversos tipos y quizás no todas resulten compatibles entre sí para enviarse dinero. +
Nace entonces la necesidad de pensar qué dirección nos daría el intra user a agendar si no dispone de
una wallet compatible con la que usamos para agendarlo; más aún debemos definir un mecanismo para decidir
cuando dos wallets son compatibles. +

En principio si tenemos dos niche wallets que se basan en la misma reference wallet estas deberían
ser compatibles dado que usan el mismo plugin de la capa basic wallet para llevar la información
transaccional. El problema entonces aparenta poder reducirse a analizar la compatibilidad de las
reference wallets del sistema. +
Sin embargo puede darse que distintas reference wallets sean compatibles entre sí. Por ejemplo,
una wallet no nos permita gastar bitcoins si el precio actual es inferior al precie de cuando se compraron
los bitcoins sería compatible con la reference bitcoin wallet dado que la interfaz de crédito y débito
de ambas wallets es idéntica. +

Por ende, cuando nos llegue una solicitud de otro usuario para agendarlo como contacto en una wallet
tendremos como dato el tipo de reference wallet desde la cual nos están agendando y debemos probablemente
tener un módulo que decida desde qué wallet podemos aceptarlo como contacto o, en caso de que no tengamos
ninguna, nos sugiera instalar alguna del catálogo. +
Una vez resuelto el tema de la compitibilidad de wallets el mensaje de aceptación registra entre otros
datos una dirección que nos enviaron con la solicitud de contacto a la cual enviar dinero y enviamos
los mismos datos desde nuestro network service. +
El network service que se ocupa de estos intercambios de información para agendar contactos entre wallets
es el Network Service Crypto Addresses. +

